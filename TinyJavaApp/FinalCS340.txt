Matthew Fischer
My code exits upon finding an error
That is why I split my code into multiple programs 
to show all the error checks
Code is at the end
Programs are read in by a file.

---PROGRAM 1-------VALID

PROGRAM matt
BEGIN
int x = 3;
if(x==3&&x>7){
   x=10*((23-4)/4);}
else
{i=3;
x=3; int x = 3 + 3 *9;
}
double w = 3;
int z = 4+(((4+4)-2+1)*8)+7;
x = z + (w +(3 -(x*4)));
if(x==8 && y < 2)
x = 3*(((z*1)+w)-71);
double int x = 3;
       ^
Error -303 : line 16 at col 8
Missing identifier for type declaration

----Program 2-------VALID
int x = 3;
if(x==3&&x>7){x=10*((23-4)/4);}else{i=3;x=3; 
int x = 3 + 3 *9;}
double w = 3;
int z = 4+(((4+4)-2+1)*8)+7;
x = z + (w +(3 -(x*4)));
if(x==8 && y < 2)
x = 3*(((z*1)+w)-71);
int x = 1;
END

----Program 3-------ERROR

PROGRAM matt
BEGIN
int s =3 ;
double c = 1+3+(3+(3*s))-8;
END

--------Program 4-----ERROR

PROGRAM matt
BEGIN
int x = 1 + 3 + 3 + +3;
                    ^
Error -304 : line 4 at col 21
Missing semicolon for type declaration assignment statement

-----PROGRAM 5-----------VALID

PROGRAM matt
BEGIN
int x = 1 * (3 + 3 )+ 3;
double y = 3; -3 
              ^
Error -200 : line 5 at col 15
Missing 'if', 'int', 'double', or 'identifier'

----PROGRAM 6--------ERROR

PROGRAM matt
BEGIN
int x = 1 * (3 + 3 )+ 3;
double y = 3;
if(x==3)
END
^
Error -200 : line 7 at col 1
Missing 'if', 'int', 'double', or 'identifier'


----PROGRAM 7--------VALID

PROGRAM matt
BEGIN
int x = 1 * (3 + 3 )+ 3;
double y = 3;
if(x==3){}
END

----PROGRAM 8--------VALID

PROGRAM matt
BEGIN
int x = 1 * (3 + 3 )+ 3;
double y = 3;
if(x==3){int x=4;}
END

----PROGRAM 8--------VALID

PROGRAM matt
BEGIN
int x = 1 * (3 + 3 )+ 3;
double y = 3;
if(x==3){
int x=4;
}
END

------------------------------Code
public class TinyJavaApp {
    
        
  
    public static void main(String[] args) {
        
        ReadInput reader = new ReadInput();
        reader.reader();
        Parser parser = new Parser();
        boolean success = true;
        int row = 0;
        
        // PASS ONE
        for(String line : reader.text){
            
            System.out.println("\nLine : " + row + "\n====================");
            success = parser.parseLine(line,row,0);
            
            
            
            row++;
        }
        // PASS TWO
        Grammar g = new Grammar();
        g.validate_grammar();
        


    }

}
--------------------------------------------------------------
enum TType {
    
    number,
    integerN,
    doubleN,
    decimal,
    block,
    parenthesis,
    white_space,
    arithmetic_operator,
    relational_operator,
    logical_operator,
    line_terminator,
    assignment_token,
    identifier,
    expression,
    comment,
    line,
    reservedWords
    
    
}

----------------------------------------------------------------
public class Token {
    
    public static LinkedList<Token> list = new LinkedList<Token>();
    
    public TType type;
    public String text;
    public int row;// TOKEN ROW
    public int col;//  TOKEN COL
    
    // DEFAULT CONSTRUCTOR
    public Token(){
        text = "";
        row = 0;
        col = 0;
        
    }
    
    // CONSTRUCTOR
    public Token(TType type, String text, int row, int col){
        this.type = type;
        this.text = text;
        this.row = row;
        this.col = col;
    }
    
}
-----------------------------------------------------------------------
public class Symbol {

    public static LinkedList<Symbol> list = new LinkedList<Symbol>();
    
    public String identifier;
    public String identifierType;
    public String value;
    public double dValue;
    public int iValue;

    // CONSTRUCTOR
    public Symbol(Token identifierType,Token identifier,Token value){
        if(identifierType != null)
            this.identifier = identifier.text;
        if(identifier != null)
            this.identifier = identifier.text;
        if(value != null)
            this.value = value.text;
        dValue = 0.0;
        iValue = 0;
    }
    
    
    // FIND SYMBOL
    public static boolean findSymbol(String identifier){
        for(int i = 0; i < list.size(); i++){
            if(list.get(i).identifier == identifier)
                return true;
        }
        return false;
    }
}

---------------------------------------------------------
public class ReadInput {
    
    ArrayList<String> text;
    Scanner input;
    int row;

    // CONSTRUCTOR
    public ReadInput(){
        row = 0;        
        try{
            input = new Scanner(new File("code.txt"));
        }catch(Exception e){
            System.out.println("error reading file");
        }
        
        text = new ArrayList();
        
    }
    
    // GET FILE PROGRAM
    public void reader(){
        int count = 0;
        while(input.hasNextLine()){
            count++;
            text.add(input.nextLine());
        }
        
    }
    
    // GET ONE LINE
    public String getLine(){
        if(text.isEmpty()){
            return null;
        }
        
        String x = text.get(row);
        row++;

        return x;
        
    }
}
-------------------------------------------------------------
public class Parser {

    public boolean parseLine(String line,int row, int col){

        //parse one line, until error, or end
        Token token = null;
        Token l = new Token(TType.line,line,row,col);
        
        if(col == 0){
            Token.list.add(l);
            //Tester
            System.out.println("Code\t: " + l.text);
        }

        if(col >= line.length()){
            Token.list.add(new Token(TType.white_space," ",row,col));
            print_token(Token.list.peekLast()); // PRINT LAST TOKEN WHITESPACE
            return true;
        }
        // WHITE SPACE
        if(token == null){
            token = is_whitespace(line,row,col);
        }
        // COMMENT
        if(token == null){
            token = is_comment(line,row,col);
        }
        // CHECK FOR NUMBER
        if(token == null){
            token = is_numbersCheck(line,row,col);
        }
        // CHECK FOR RESERVED WORD
        if(token == null){
            token = is_reservedWord(line,row,col);//if else int double program begin end
            //  is_whitespace( str.charAt(col+ reserved[i].length() 
        }
        // CHECK IF IDENTIFIER
        if(token == null){
            token = is_identifier(line,row, col);// VARIABLE NAME
        }
        
        // CHECK IF LOGICAL OPERATOR
        if(token == null){
            token = is_logical_operator(line,row, col);// VARIABLE NAME
        }
        // CHECK IF ARITHMETIC OPERATOR
        if(token == null){
            token = is_arithmetic_operators(line,row, col);// VARIABLE NAME
        }
        // CHECK IF LINE TERMINATOR
        if(token == null){
            token = line_terminator(line,row, col);// VARIABLE NAME
        }
        if(token == null){
            token = is_relational_operators(line,row, col);// VARIABLE NAME
        }
        // CHECK IF ASSIGNMENT OPERATOR
        if(token == null){
            token = is_assignment_operator(line,row, col);// VARIABLE NAME
        }
        // CHECK IF ASSIGNMENT OPERATOR
        if(token == null){
            token = is_parenthesis(line,row, col);// VARIABLE NAME
        }
        // CHECK IF BLOCK
        if(token == null){
            token = is_block(line,row, col);// VARIABLE NAME
        }
        // CHECK IF PERIOD  
        if(token == null){
            token = is_decimal(line,row, col);// VARIABLE NAME
        }
        

        if(token != null){
            col = col + token.text.length();
            Token.list.add(token);
            print_token(token);
        }
        
        // END OF LINE
      
            // CHECK VALID STATMENT
        return parseLine(line,row,col);
        

    }// END OF PARSE LINE
    // IS A NUMBER
    public Token is_numbersCheck(String str, int row, int col){
        int digit = 0;
        String numbers = "";
        Token t = null;
        boolean found_dot = false;
        // IS CHAR A NUMBER
        // FIRST CHAR IS NUMBER
        if(str.charAt(col) >= '0' && str.charAt(col) <= '9' || str.charAt(col) == '.'){
            numbers += str.charAt(col);
            
            // MORE THAN ONE DIGIT NUMBER
            digit++;
            
            while(digit+col < str.length() && 
                    ((str.charAt(col+digit) >= '0' && str.charAt(col+digit) <= '9') 
                    || (str.charAt(col+digit) == '.' && !found_dot))){
                numbers = numbers + str.charAt(col+digit);
                digit++;
            }

            t = new Token(TType.number,numbers,row,col);
            
            
        }// END OF NUMBER   
        return t;
    }
    // CHECK DOUBLE OR INTEGER
    public boolean is_double(String str){
        boolean is_double = false;
        for(int i = 0; i < str.length(); i++){
            // CONTAINS ONE DECIMAL POINT
            if(str.charAt(i) == '.' && is_double == false){
                is_double = true;
            }
            // CONTAINS TWO DECIMAL POINT
            if(str.charAt(i) == '.' && is_double == true){
                is_double = false;
                break;
            }
                
        }
        return is_double;
    }

    // IS A RESERVED WORD
    public Token is_reservedWord(String str, int row, int col){
 
        int digit = 0;
        Token t = null;
        
        // FIRST CHAR OF IDENTIFIER
        if(str.charAt(col+digit) == '_' || str.charAt(col+digit) >= 'A' && str.charAt(col+digit) <= 'Z'
                || (str.charAt(col+digit) >= 'a' && str.charAt(col+digit) <= 'z')){
            digit++;
         
            // OTHER CHAR OF IDENTIFIER
            while( digit+col < str.length() && ((str.charAt(col+digit) >= 'A' && str.charAt(col+digit) <= 'Z') 
                    || (str.charAt(col+digit) >= 'a' && str.charAt(col+digit) <= 'z')
                    || str.charAt(col+digit) == '_' 
                    || (str.charAt(col+digit) >= '0' && str.charAt(col+digit) <= '9') ) ){
                digit++;
            }
           
            //IS IDENTIFIER
            String[] reserved = {"PROGRAM","BEGIN","END","if","else","int","double"};
            String temp = str.substring(col, col+digit);
            for(int i = 0; i < reserved.length; i++){
                if( temp.equals(reserved[i]))
                    t = new Token(TType.reservedWords,reserved[i],row,col);



            }
           
        }
        // ALL OTHER CHAR OF IDENTIFIER
        return t;
        
        

        
    }
    
    
    // IS AN IDENTIFIER
    public Token is_identifier(String str,int row, int col){
        int digit = 0;
        Token t = null;
        
        // FIRST CHAR OF IDENTIFIER
        if(str.charAt(col+digit) == '_' || str.charAt(col+digit) >= 'A' && str.charAt(col+digit) <= 'Z'
                || (str.charAt(col+digit) >= 'a' && str.charAt(col+digit) <= 'z')){
            digit++;
         
            // OTHER CHAR OF IDENTIFIER
            while( digit+col < str.length() && ((str.charAt(col+digit) >= 'A' && str.charAt(col+digit) <= 'Z') 
                    || (str.charAt(col+digit) >= 'a' && str.charAt(col+digit) <= 'z')
                    || str.charAt(col+digit) == '_' 
                    || (str.charAt(col+digit) >= '0' && str.charAt(col+digit) <= '9') ) ){
                digit++;
            }
           
            t = new Token(TType.identifier,str.substring(col,col+digit),row,col); 
           
        }
        // ALL OTHER CHAR OF IDENTIFIER
        return t;
    }
    
   
    
    // ARITHMETIC OPERATORS
    public Token is_arithmetic_operators(String str,int row,int col){
        Token t = null;
        if(str.charAt(col) == '+' || str.charAt(col) == '-' || str.charAt(col) == '*' || str.charAt(col) == '/')
            t = new Token(TType.arithmetic_operator,str.substring(col, col+1),row,col);
            
       return t;
    }
    
    // RELATIONAL OPERATORS
    public Token is_relational_operators(String str,int row,int col){
        Token t = null;
        String[] relational ={"!=","==",">=","<=","<",">"};
        for(int i = 0; i < relational.length; i++){
            if( str.startsWith(relational[i], col) ){
                return new Token(TType.relational_operator,relational[i],row,col);
            }
        }
            
       return t;
    }
    
    // LOGICAL OPERATORS
    public Token is_logical_operator(String str,int row,int col){
        Token t = null;
        String[] logical ={"&&","||"};
        for(int i = 0; i < logical.length; i++){
            if( str.charAt(col) == '&' && str.charAt(col+1) == '&')
                return new Token(TType.logical_operator,logical[i],row,col);
            else if( str.charAt(col) == '|' && str.charAt(col+1) == '|')
                return new Token(TType.logical_operator,logical[i],row,col);
        }
       return t;
    }
    // IS ASSIGNMENT OPERATOR
    public Token is_assignment_operator(String str,int row,int col){
        Token t = null;
        if(str.charAt(col) == '=')
            t = new Token(TType.assignment_token,"=",row,col);
            
       return t;
    }
    // IS ASSIGNMENT OPERATOR
    public Token is_comment(String str,int row,int col){
        Token t = null;
        if(str.length()-col > 1 && str.charAt(col+1) == '/' && str.charAt(col+2) == '/' )
            t = new Token(TType.comment,str.substring(col),row,col);
            
       return t;
    }

    public Token is_whitespace(String str, int row, int col){
        int digit = 0;
        Token t = null;
        
        // FIRST CHAR
        if(str.charAt(col) == ' ' || str.charAt(col) == '\t' 
                || str.charAt(col) == '\n' || str.charAt(col) == '\r'){
            digit++;
            // OTHER CHAR OF IDENTIFIER
            while(digit+col < str.length() && (str.charAt(col) == ' ' || str.charAt(col) =='\t' 
                || str.charAt(col) == '\n' || str.charAt(col) == '\r')){
                digit++;
            }
           
            t = new Token(TType.white_space," ",row,col); 
           
        }
            
       return t;
    }
    // PARENTHESIS
    public Token is_parenthesis(String str,int row,int col){
        Token t = null;
        String[] paren ={"(",")"};
        for(int i = 0; i < paren.length; i++){
            if( str.startsWith(paren[i], col) ){
                return new Token(TType.parenthesis,paren[i],row,col);
            }
        }
       return t;
    }
    
    // BLOCK
    public Token is_block(String str,int row,int col){
        Token t = null;
        String[] block ={"{","}"};
        for(int i = 0; i < block.length; i++){
            if( str.startsWith(block[i], col) ){
                return new Token(TType.block,block[i],row,col);
            }
        }
       return t;
    }
    
    public Token line_terminator(String str,int row,int col){
        Token t = null;
        if(str.charAt(col) == ';')
            t = new Token(TType.line_terminator,";",row,col);
            
       return t;
    }
    
    public Token is_decimal(String str,int row,int col){
        Token t = null;
        if(str.charAt(col) == '.')
            t = new Token(TType.decimal,".",row,col);

       return t;
    }
    
    
    //PRINT TOKEN
    public void print_token(Token token){
        if(token.type != TType.comment)
            System.out.println(token.text + "\t: " + token.type );
            
        else
            System.out.println(token.text + " : " + token.type);

    }
    

}
------------------GRAMMAR-----------------------
public class Grammar {
    
    
    int depth = 0;
    int index = 0;
    int state = 0;
    
    public void validate_grammar(){
        System.out.println("\n\n\n---------------\nPARSING GRAMMAR\n---------------");
        while(index < Token.list.size() && state >= 0 && state < 1000){
            
            switch(state){
                case 0:
                    state = valid_program_statement();
                    break;
                // VALIDATE BEGIN STATEMENT
                case 1:
                    state = validate_begin_statement();
                    break;
                // VALIDATE STATEMENTS, END
                case 2:
                    state = find_statements_that_end_with_end();
                    break;
                // VALIDATE END STATEMENT
                case 3:
                    state = validate_end_statement();
                    break;
                default:
                    state = -100;
            }// END SWITCH
            
           
            
        }// END OF WHILE
        
        error_output();

    }

    public void error_output(){
        // ERROR PROCESSING
        Token t = Token.list.get(index);
        if(state < 0){
            String str = "";
            for(int i = 0; i < (t.col); i++){
                str += " ";
            }
            
            System.out.println(str + "^");
            System.out.println("Error "+ state+ " : line " + (t.row+1) + " at col " + (t.col+1) );
 
            switch(state){
                case -100:
                    System.out.println(" Process program statement method");
                    break;
                case -101:
                    System.out.println("No program found");
                    break;
                case -102:
                    System.out.println("Missing program name");
                    break;
                case -103:
                    System.out.println("Missing 'BEGIN'");
                    break;
                case -104:
                    System.out.println("Missing 'end'");
                    break;
                case -106:
                    System.out.println("Missing '}' end of block");
                    break;
                case -200:
                    System.out.println("Missing 'if', 'int', 'double', or 'identifier'");
                    break;
                case -301:
                    System.out.println("Missing int or double found for type declaration");
                    break;  
                case -302:
                    System.out.println("Missing space between int and identifier for type declaration");
                    break;  
                case -303:
                    System.out.println("Missing identifier for type declaration");
                    break;  
                case -304:
                    System.out.println("Missing semicolon for type declaration assignment statement");
                    break;
                case -401:
                    System.out.println("Missing 'if' word in if statement");
                    break;  
                case -402:
                    System.out.println("Missing '(' on if statement");
                    break;  
                case -403:
                    System.out.println("Missing ')' on if statement");
                    break;
                case -404:
                    System.out.println("Missing '}' on if statement");
                    break;
                case -405:
                    System.out.println("Missing 'else' on if statement");
                    break;  
                case -450:
                    System.out.println("Missing identifier on assignment statement");
                    break;
                case -451:
                    System.out.println("Missing '=' on assignment statement");
                    break;
                case -452:
                    System.out.println("Missing '; on assignment statement");
                    break;  
                case -998:
                    System.out.println("Symbol add at Type declaration");
                    break;
                case -750:
                    System.out.println("Missing relational expression");
                    break;
                case -900:
                    System.out.println("Missing number or identifier for arithmetic expression");
                    break;  
                case -999:
                    System.out.println("Variable already exists");
                    break; 
                case -995:
                    System.out.println("Symbol");
                    break; 
                case -997:
                    System.out.println("Symbol");
                    break;


                default: 

            }// END OF SWITCH
        }
    }

    // FIRST LINE OF PROGRAM
    private int valid_program_statement() {
        
            //HAS TO BE IN A ROW
            
        if(!is_program(0))
            return -101;// TOKEN PROGRAM
        if(!is_identifier(1))
            return -102;// TOKEN IDENTIFIER
        return 1;
    }
    
    
    private int validate_begin_statement() {
        
        if(!is_reserved_words_begin(1))
            return -103;
        return 2;
    }

    private int validate_end_statement() {
        if(!is_reserved_words_end(0))
            return -104;
        return 1000;
    }

    private int validate_statement() {
        is_whitespace(0);// STRIP WHITESPACE
        Token t = Token.list.get(index);

        // RESERVED WORDS INT, DOUBLE, IF, IDENTIFIER
        
        // IF TOKEN IS IF
        // RETURN validate_if_statement();
        if(t.type == TType.reservedWords && t.text.equals("if"))
            return validate_if_statement();
        // IF TOKEN IS INT 
        // RETURN VALIDATE INT STATEMENT
        if(t.type == TType.reservedWords && t.text.equals("int"))
            return validate_int_statement();
        // IF TOKEN IS DOUBLE 
        // RETURN VALIDATE DOUBLE STATEMENT
        if(t.type == TType.reservedWords && t.text.equals("double"))
            return validate_double_statement();
        // IF TOKEN IS IDENTIFIER
        // RETURN VALIDATE ASSIGNMENT STATEMENT
        if(t.type == TType.identifier )
            return validate_assignment_statement();
        

        return -200;
    }
    public int find_statements_that_end_with_end(){
        while(index < Token.list.size() && state > 0){// i add this state ------------------------
            is_whitespace(0);// STRIP WHITESPACE
            if(TType.reservedWords == Token.list.get(index).type && Token.list.get(index).text.equals("END"))
                return 3;
            return validate_statement();// ---------------------------------i did this --------------------------------  
        }
        return state;
    }
    public int find_statements_that_end_closing_brace(){
        if(index >= Token.list.size())
            return -106;
        is_whitespace(0);// STRIP WHITESPACE
    
        while(true){
            int check = validate_statement();
            is_whitespace(0);// STRIP WHITESPACE

            if(check == -200 
                    && (TType.block == Token.list.get(index).type && Token.list.get(index).text.equals("}"))){
                return state;
                
            }
            else if(check < 0)
                return check;
            else
                return state;
        }
        
    }

    
    // IS WHITESPACE
    private boolean is_whitespace(int min_whitespace) {
        // END OF TOKEN LIST
        if(index >= Token.list.size() || state < 0)
            return false;
        
 
        
        // IF THERE IS A WHITESPACE OR LINE       
        if(min_whitespace > 0){
            if(Token.list.get(index).type == TType.line){
                    System.out.println(Token.list.get(index).text);
                    index++;
            }
            if(Token.list.get(index).type != TType.white_space){
                return false;
            }
        }
        
        
        // EATS ALL WHITESPACE
        while(index < Token.list.size()){
            if(Token.list.get(index).type == TType.line){
                    System.out.println(Token.list.get(index).text);
                    index++;
            }
            if(Token.list.get(index).type == TType.white_space){
                index++;
            }
            else
                break;
            
        }
        
        return true;
    }

    private boolean is_program(int min_whitespace) {
//        if(!is_whitespace(min_whitespace))// MISSING WHITESPACE
//            return false;
        is_whitespace(0);
        return is_program_found();
        
    }
    private boolean is_program_found() {
        if(index >= Token.list.size())
            return false;
        // ERROR IN CREATING RESERVED WORD IN PARSER LINE 130 ABOUT END OF LINES
        if(Token.list.get(index).text.equals("PROGRAM") && Token.list.get(index).type == TType.reservedWords){
            index++;
            return true;
        }
        return false;
    }
    private boolean is_identifier(int min_whitespace) {
        if(!is_whitespace(min_whitespace))// MISSING WHITESPACE
            return false;
        return is_identifier_found();
    }
    private boolean is_identifier_found() {
        if(index >= Token.list.size())
            return false;
        if(Token.list.get(index).type == TType.identifier){
            
            index++;
            return true;
        }
        return false;
    }

    private boolean is_assignment_token(int min_whitespace) {
        if(!is_whitespace(min_whitespace))// MISSING WHITESPACE
                return false;
            return is_assignment_token_found();
    }
    private boolean is_assignment_token_found() {
        // IF LIST SIZE IS SMALLER THAN INDEX
        if(index >= Token.list.size())
            return false;
        // COMPARE TYPE AND TEXT
        if(Token.list.get(index).type == TType.assignment_token){
            index++;
            return true;
        }
        return false;
    }

    private boolean is_number(int min_whitespace) {
        if(!is_whitespace(min_whitespace))// MISSING WHITESPACE
                return false;
            return is_number_found();    
    }
    private boolean is_number_found() {
        // IF LIST SIZE IS SMALLER THAN INDEX
        if(index >= Token.list.size())
            return false;
        // COMPARE TYPE AND TEXT
        if(Token.list.get(index).type == TType.number ){
            index++;
            return true;
        }
        return false;
    }

    
    private boolean is_reserved_words_begin(int min_whitespace) {

        if(!is_whitespace(min_whitespace))// MISSING WHITESPACE
            return false;
        return is_reserved_words_begin_found();
    }
    private boolean is_reserved_words_begin_found() {
       
        // IF LIST SIZE IS SMALLER THAN INDEX
        if(index >= Token.list.size())
            return false;
        if(Token.list.get(index).text.equals("BEGIN") 
                && Token.list.get(index).type  == TType.reservedWords){
            index++;
            return true;
        }
        return false;
    }

    private boolean is_reserved_words_int(int min_whitespace) {
        if(!is_whitespace(min_whitespace))// MISSING WHITESPACE
            return false;
        return is_reserved_words_int_found();
    }
    private boolean is_reserved_words_int_found() {
        // IF LIST SIZE IS SMALLER THAN INDEX
        if(index >= Token.list.size())
            return false;
        if(Token.list.get(index).text.equals("int")){
            index++;
            return true;
        }
        return false;
    }

    private boolean is_reserved_words_if(int min_whitespace) {
        if(!is_whitespace(min_whitespace))// MISSING WHITESPACE
            return false;
        return is_reserved_words_if_found();
    }
    private boolean is_reserved_words_if_found() {
        // IF LIST SIZE IS SMALLER THAN INDEX
        if(index >= Token.list.size())
            return false;
  
        if(Token.list.get(index).text.equals("if")){
            index++;
            return true;
        }
        return false;
    }

    
    private boolean is_semicolon(int min_whitespace) {
        if(!is_whitespace(min_whitespace))// MISSING WHITESPACE
            return false;
        return is_reserved_words_semicolon_found();
    }
    private boolean is_reserved_words_semicolon_found() {
        // IF LIST SIZE IS SMALLER THAN INDEX
        if(index >= Token.list.size())
            return false;
        
        if(Token.list.get(index).text.equals(";")&& Token.list.get(index).type == TType.line_terminator){
            index++;
            return true;
        }
        return false;
    }

    private boolean is_reserved_words_end(int min_whitespace) {
        if(!is_whitespace(min_whitespace))// MISSING WHITESPACE
            return false;
        return is_reserved_words_end_found();
    }
    private boolean is_reserved_words_end_found() {
        // IF LIST SIZE IS SMALLER THAN INDEX
        if(index >= Token.list.size())
            return false;
        if(Token.list.get(index).text.equals("END")){
            index++;
            return true;
        }
        return false;
    }

    private int validate_if_statement() {
        // REMOVE WHITESPACE
        // IF TOKEN IS NOT "IF"
        // RETURN ERROR
        
        is_whitespace(0);
        
        if(Token.list.get(index).type != TType.reservedWords 
                || !Token.list.get(index).text.equals("if"))
            return -401;
        index++;
        
        //IF TOKEN IS NOT (
        // RETURN ERROR
        is_whitespace(0);
        if(Token.list.get(index).type != TType.parenthesis 
                || !Token.list.get(index).text.equals("("))
            return -402;
        index++;
        
        // RELATIONAL EXPRESSION METHOD
        is_whitespace(0);
        state = relational_expression();
        if(state < 0)
            return state;
        
        
        // IF TOKEN IS NOT )
        // RETURN ERROR
        is_whitespace(0);
        if(Token.list.get(index).type != TType.parenthesis 
                || !Token.list.get(index).text.equals(")"))
            return -403;
        index++;
        
        // IF TOKEN IS {
        // VALIDATE STATEMENTS
        // IF TOKEN IS NOT }
        // RETURN ERROR
        is_whitespace(0);
        if(Token.list.get(index).type == TType.block 
                && Token.list.get(index).text.equals("{")){
            index++;
            state = find_statements_that_end_closing_brace();
            if(state < 0)
                return state;// IF ERROR
            
            is_whitespace(0);
         
            if(Token.list.get(index).type != TType.block 
                || !Token.list.get(index).text.equals("}"))
                return -404;
           
        }
        // MUST BE SINGLE STATEMENT
        else{
            is_whitespace(0);
            state = validate_statement();
                if(state < 0)
                    return state;
        }
      
        index++;
        
        // OPTION ELSE TOKEN
        // IF TOKEN IS {
        // VALIDATE STATEMENTS
        // IF TOKEN IS NOT }
        // RETURN ERROR
        is_whitespace(0);
        
        if(Token.list.get(index).type == TType.reservedWords 
                && Token.list.get(index).text.equals("else")){
            index++;
            is_whitespace(0);
            if(Token.list.get(index).type == TType.block 
                    && Token.list.get(index).text.equals("{")){
                index++;
                state = find_statements_that_end_closing_brace();
                if(state < 0)
                    return state;
                
                is_whitespace(0);
                if(Token.list.get(index).type != TType.block 
                    || !Token.list.get(index).text.equals("}")){
         
                    return -404;
                }
                index++;
            }
            // MUST BE SINGLE STATEMENT
            else{
                is_whitespace(0);
                state = validate_statement();
                    if(state < 0)
                        return state;
            }
        }
        
        return state;
    }
    
    public int validate_int_statement(){
        return validate_type_statement("int"); 
    }
    public int validate_double_statement(){
        return validate_type_statement("double"); 
    }
    private int validate_type_statement(String type) {

        // IF TOKEN IS NOT INT/DOUBLE
        // RETURN ERROR
        is_whitespace(0);
    
        
        if(Token.list.get(index).type != TType.reservedWords 
                || !Token.list.get(index).text.equals(type))
            return -301;

        index++;
        
        // WHITE SPACE REQUIRED AFTER 'INT'
        if(!is_whitespace(1))
            return -302;
        
        //IF TOKEN IS NOT AN IDENTIFIER
        // RETURN ERROR
        
        if(Token.list.get(index).type != TType.identifier)
            return -303;
        // if identifier in symbol table return error
        // else add identifier to table
        // GO TO NEXT TOKEN
        index++;
        
        
        //IF TOKEN IS ;
        // INCREMENT INDEX AND RETURN VALID
        is_whitespace(0);
        if(Token.list.get(index).type == TType.line_terminator 
                && Token.list.get(index).text.equals(";")){

            index++;
            return state;
        }
        
        // IF TOKEN IS =
        // STATE = ARTHIMETIC EXPRESSION METHOD
        is_whitespace(0);
        if(Token.list.get(index).type == TType.assignment_token 
                && Token.list.get(index).text.equals("=")){

            index++;
            state = arthimetic_expression();// NEEDS WHITE SPACE
 
        }
        
        
        
        
        //IF TOKEN IS ;
        // INCREMENT INDEX AND RETURN VALID
        is_whitespace(0);
        if(Token.list.get(index).type == TType.line_terminator 
                && Token.list.get(index).text.equals(";")){

            index++;

            return state;
        }
           
        return -304; // SEMI COLON ERROR
    }

    private int validate_assignment_statement() {
        
        //IF TOKEN IS NOT AN IDENTIFIER
        // RETURN ERROR
        is_whitespace(0);

        if(Token.list.get(index).type != TType.identifier)
            return -450;
        index++;
        
        

        // IF TOKEN IS =
        // STATE = ARTHIMETIC EXPRESSION METHOD
        is_whitespace(0);
        if(Token.list.get(index).type == TType.assignment_token 
                && Token.list.get(index).text.equals("=")){
            index++;
            state = arthimetic_expression();
            
        }
        else
            return -451;
        
        
        
        
        //IF TOKEN IS ;
        // INCREMENT INDEX AND RETURN VALID
        is_whitespace(0);
        if(Token.list.get(index).type == TType.line_terminator 
                && Token.list.get(index).text.equals(";")){
            index++;
            
            return find_statements_that_end_with_end();
        }
           
        return -452; // END ASSIGNMENT STATEMENT
    }


    private int relational_expression() {
        //X == U
        // 3 == 3
        // 3 ==3 && X!=Y || 4 == Z || 4 > 3
        // (3==3)
        // (3 ==3 && ((X!=Y) || 3 == Z) || 4 ==F)
        if(!is_relational())
            return -750;
        return state;
        
    }
    public boolean is_num_or_identifier(){
        is_whitespace(0);
        
        return (Token.list.get(index).type == TType.number 
                || Token.list.get(index).type == TType.identifier);
   
    }
    public boolean is_relational(){
        // IS NUMBER OR IDENTIFIER  
        is_whitespace(0);
        
        // TERMINATION
        // WHEN RIGHT PAREN, INCREMENT, RETURN TRUE
        if(Token.list.get(index).type == TType.parenthesis && Token.list.get(index).text.equals(")")){
            if(depth <= 0)
                return true;
            
            index++;
            depth--;
            return true;
            
        }
        is_whitespace(0);
        // if LEFT PAREN, increment, return is_relational()
        if(Token.list.get(index).type == TType.parenthesis && Token.list.get(index).text.equals("(")){
            depth++;
            index++;
            return is_relational();
        }
        
        // OPTIONAL RELATIONAL EXPRESSION-----------------------------------------------
     
        
        // IF NUMBER, AND RELATIONAL OPERATOR
        if(!is_num_or_identifier())
            return false;
        index++;
        
        is_whitespace(0);
        if(Token.list.get(index).type != TType.relational_operator)
            return false;
        index++;

        // if NUMBER OR IDENTIFIER
        if(!is_num_or_identifier())
            return false;
        index++;
        
        // IF LOGICAL
        // IF LEFT PAREN THEN INCREMENT AND RECALL
        // IF RELATIONAL EXPRESSION
        return is_optional_logic_with_relational_expression();

    }
    
    public boolean is_optional_logic_with_relational_expression(){
        
        // OPTIONAL RECURRSION
        is_whitespace(0);
        if(Token.list.get(index).type == TType.logical_operator)
            index++;
       

        // ALL IS VALID AND DONE
        return is_relational();
    }

    private int arthimetic_expression() {
        is_whitespace(0);
        // TERMINATION
        // WHEN RIGHT PAREN, INCREMENT, RETURN TRUE
        if(Token.list.get(index).type == TType.line_terminator)
            return state;
        if(Token.list.get(index).type == TType.parenthesis && Token.list.get(index).text.equals(")")){
            index++;
            
            if(depth > 0)
                depth--;
               

            is_whitespace(0);
            if(Token.list.get(index).type == TType.arithmetic_operator ){
                return optional_arithmetic_expression();
            }
            return (depth <=0)?state:arthimetic_expression();
        }
        
        is_whitespace(0);
        // if LEFT PAREN, increment, return is_relational()
        if(Token.list.get(index).type == TType.parenthesis && Token.list.get(index).text.equals("(")){
            depth++;
            index++;
            return arthimetic_expression();
        }
        
        // IF NUMBER 
        if(!is_num_or_identifier())
            return -900;
        index++;
        
        
        return optional_arithmetic_expression();
    }
    
    public int optional_arithmetic_expression(){
        
        is_whitespace(0);
        if(Token.list.get(index).type == TType.arithmetic_operator)
            index++;
        return arthimetic_expression();
    }
}

   