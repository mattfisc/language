
Grammar Table

 :   means "is defined as"
 ,	 concatenation
 ;	 termination
" "  enclose literal items    
[ ]  enclose items which may be omitted
{ }  enclose items which may appear zero or more times    
 |   indicates a choice   
( )  are used for grouping required choices    
< >  enclose semantic qualifications
(* *)comments
 -	 exception

----------------------------------------------------

<arithmetic-operator> 	: '+' | '-' | '*' | '/'
<relational-operator> 	: '>' | '<' | '>=' | '<=' | '==' | '!='
<logical-operator> 		: '&&' | '||'

<type> : 'int' | 'double'
<digit> : '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9'
<integer> : ['-']<digit>{<digit>}
<double>  : ['-']<digit>{<digit>} '.' {<digit>}
<number> : <integer> | <double>

<letter> :  'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' 
	| 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' 
	| 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z' | 'A' | 'B' | 'C' 
	| 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' 
	| 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' 
	| 'X' | 'Y' | 'Z'

<symbol> : 	'[' | ']' | '{' | '}' | '(' | ')' | '<' | '>' | ''' 
	| '"' | '=' | '|' | '.' | ',' | ';'

<underline> : '_'

<first-char> : <letter> | <underline>
<other-char> : <letter> | <underline> | <digit>

<identifier> : <first-char>{<other-char>}

<line-terminator> : ';'

<assignment-token> : '='

<type-declaration> : <type><identifier>
<type-declaration-initialized> : <type-declaration><assignment-token><expression>
<type-declaration-statement> : <type-declaration> | <type-declaration-initialized>

<expression> :  '('<expression>')' | <identifier> | <number> | <expression><arithmetic-operator><expression>

<term> : <identifier> | <number>
<relational-expression> : ( '('<relational-expression>')' | <term><relational-operator><term>  ){<logical-operator><relational-expression>}


<assignment-statement> : <identifier><assignment-token><expression>

<if-statement> : 'if' '(' <relational-expression> ')' <block> ['else' <block>]
				
<statement> : ( <assignment-statement> | <type-declaration-statement> ) <line-terminator> | <if-statement> 

<block> :  <if-one-line> | '{' {<statement>} '}' 

<if-one-line>  :  <assignment-statement><line-terminator> | <if-statement> 

<program> : 'PROGRAM' <identifier>
            'BEGIN' <block>
            'END'


